// Math მეთოდები:
// Math.abs(x)
// აბრუნებს x-ის აბსოლუტურ მნიშვნელობას.


// Math.abs(-5); // 5
// Math.ceil(x)
// ათვლის მიმართულებით ყველაზე ახლოს მდებარე მთელი რიცხვი (მაღლა) აბრუნებს.


// Math.ceil(4.2); // 5
// Math.floor(x)
// ყველაზე ახლოს მდებარე მთელი რიცხვი (ქვემოთ) აბრუნებს.


// Math.floor(4.7); // 4
// Math.round(x)
// რიცხვს ათწილადამდე იწყებს და დაარაუნდავს ყველაზე ახლოს მდებარე მთელ რიცხვს.


// Math.round(4.5); // 5
// Math.round(4.4); // 4
// Math.max(...values)
// აბრუნებს ყველაზე დიდ მნიშვნელობას იმ რიცხვებს შორის.


// Math.max(1, 2, 3, 4); // 4
// Math.min(...values)
// აბრუნებს ყველაზე მცირე მნიშვნელობას იმ რიცხვებს შორის.


// Math.min(1, 2, 3, 4); // 1
// Math.random()
// აბრუნებს შემთხვევით რიცხვს 0 და 1-ის შორის (0 - გამორიცხულია, 1 - შესაძლოა იყოს).


// Math.random(); // შემთხვევითი რიცხვი, მაგალითად: 0.5487
// Math.pow(base, exponent)
// აბრუნებს base რიცხვის ძალას exponent-ის მიხედვით.


// Math.pow(2, 3); // 8
// Math.sqrt(x)
// აბრუნებს x-ის კვადრატული ფესვს.


// Math.sqrt(16); // 4
// Math.sin(x)
// აბრუნებს x რადიანში სინის მნიშვნელობას.


// Math.sin(Math.PI / 2); // 1
// Math.cos(x)
// აბრუნებს x რადიანში კოსინის მნიშვნელობას.


// Math.cos(Math.PI); // -1
// Math.tan(x)
// აბრუნებს x რადიანში ტანგენტის მნიშვნელობას.


// Math.tan(Math.PI / 4); // 1
// Math.log(x)
// აბრუნებს x-ის ნატურალურ ლოგარითმულ მნიშვნელობას (ln(x)).


// Math.log(1); // 0
// Math.exp(x)
// აბრუნებს e (ნატურალური ლოგარითმის ბაზი) ასაწეველ x ძალას.


// Math.exp(1); // 2.718281828459045
// Math.trunc(x)
// აბრუნებს x-ის მთელ ნაწილს, უგულებელყოფს ათწილადებს.


// Math.trunc(4.9); // 4
// Math.sign(x)
// აბრუნებს x-ის ნიშანს: -1 (მინუსი), 1 (პოზიტივი), ან 0 (ნულოვანი).


// Math.sign(-5); // -1
// Math.sign(5);  // 1
// Math.sign(0);  // 0
// Math კონსტანტები:
// Math.PI
// წრის ტოლი, 3.14159...


// Math.PI; // 3.141592653589793
// Math.E
// ნატურალური ლოგარითმის ბაზი e, დაახლოებით 2.71828...


// Math.E; // 2.718281828459045
// Math.LN2
// ნატურალური ლოგარითმი 2-ზე (ln(2)), დაახლოებით 0.693...


// Math.LN2; // 0.6931471805599453
// Math.LN10
// ნატურალური ლოგარითმი 10-ზე (ln(10)), დაახლოებით 2.302...


// Math.LN10; // 2.302585092994046
// Math.LOG2E
// ლოგარითმი e-ის საფუძველზე 2-ის (log2(e)), დაახლოებით 1.442...


// Math.LOG2E; // 1.4426950408889634
// Math.LOG10E
// ლოგარითმი e-ის საფუძველზე 10-ის (log10(e)), დაახლოებით 0.434...


// Math.LOG10E; // 0.4342944819032518
// Math.SQRT2
// კვადრატული ფესვი 2-ის (√2), დაახლოებით 1.414...


// Math.SQRT2; // 1.4142135623730951
// Math.SQRT1_2
// კვადრატული ფესვი 1/2-ის (√(1/2)), დაახლოებით 0.707...


// Math.SQRT1_2; // 0.7071067811865476
// Math.MAX_VALUE
// ყველაზე დიდი შესაძლებელი რიცხვი, რომელიც შეიძლება იყოს.


// Math.MAX_VALUE; // 1.7976931348623157e+308
// Math.MIN_VALUE
// ყველაზე მცირე შესაძლებელი პოზიტიური რიცხვი.


// Math.MIN_VALUE; // 5e-324
// Math.NEGATIVE_INFINITY
// უარყოფითი უსასრულობა.


// Math.NEGATIVE_INFINITY; // -Infinity
// Math.POSITIVE_INFINITY
// დადებითი უსასრულობა.


// Math.POSITIVE_INFINITY; // Infinity
// Math.NaN
// "Not-a-Number" (არასაკმარისი მნიშვნელობა).


// Math.NaN; // NaN
