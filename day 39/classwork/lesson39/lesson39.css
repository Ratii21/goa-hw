/* display თვისებას შეუძლია შეცვალოს inline და block-level ელემენტების ქცევები. 
 მოდით პარაგრაფი(block-level ელემენტი) გადავაქციოთ inline ელემენტად: */
#my_p {
    display: inline;
}
 /* ახლა კი მოდით ლინკი(inline ელემენტი) გადავაქციოთ block-level ელემენტად:  */
#my_a {
    display: block;
}
/* პროფესიონალური ვებ გვერდების შექმნისას, სავარაუდოდ, დაგჭირდებათ ელემენტების განთავსება კონკრეტულ პოზიციებზე. 
 სწორედ აქ მოქმედებს CSS პოზიციონირება! სტანდარტულად, ყველა ელემენტი განლაგებულია სტატიკურად. 
 ეს ნიშნავს, რომ ისინი არ არიან განლაგებული რაიმე განსაკუთრებული გზით და ბრაუზერი აჩვენებს მათ ერთმანეთის მიყოლებით, 
 HTML კოდში გამოსახული თანმიმდევრობით. 
 შეგიძლიათ ელემენტებს მიანიჭოთ ზუსტი პოზიცია (გვერდის ზედა მარცხენა კუთხესთან მიმართებაში) პიქსელების კოორდინატებად გამოყენებით.
 x (or horizontal) ღერძი მიდის მარცხნიდან მარჯვნივ. y (or vertical) ღერძი მიდის ზემოდან ქვემოდან. 
 position თვისება გაძლევთ მეტ კონტროლს თქვენს დიზაინში HTML ელემენტების განთავსებისთვის.
 თქვენ შეგიძლიათ ელემენტებს მიანიჭოთ ზუსტი პოზიცია გვერდზე absolute positioning გამოყენებით.
 შემდეგ შეგიძლიათ დაამატოთ ჰორიზონტალური და ვერტიკალური კოორდინატები პიქსელებად, left და top გამოყენებით.*/

#item1 {
    position: absolute;
    left: 50px;
    top: 100px;
}



/* HTML ელემენტის პოზიციონირება ნიშნავს მისი ერთ-ერთი კუთხის პოზიციონირებას. 
 ელემენტი position: fixed-ით ყოველთვის რჩება იმავე ადგილას, საიტის სქროლვის დროსაც კი. */


 #item2 {
    background-color: blue;
    position: fixed;
    left: 40px;
    top: 70px;
    color: aqua;

}



/* გამოიყენეთ position: relative, რათა დაუბუნდეს ელემენტი თავდაპირველ პოზიციას, უფრო ზუსტად მისი კორდინატები გახდეს (0;0) */

#item3 {
    background-color: brown;
    color: white;
    position: relative;

}

/* გარდა top და left-ისა ჩვენ ასევე შეგვიძლია გამოვიყენოთ bottom და right. */
#div1 {
    position: relative;
}

#item4 {
    position: absolute;
    right: 450px;
    bottom: 10px;
    background-color: black;
    color: white;

}


/* ფონს შეუძლია უდიდესი გავლენა მოახდინოს ვებსაიტის საერთო იერსახეზე და შეგრძნებაზე. 
 ჩვენ შეგვიძლია ფონად დავაყენოთ სასურველი ფოტო background-image ბრძანებით. */
#div2 {
    position: absolute;
    top: 200px;
    left: 200px;
    width: 400px;
    height: 250px;
    background-image: url(GOA.jpg);
    background-size: cover;
    color: rgb(220, 221, 177);
    border-style: solid;
    border-radius: 40px;
    text-align: center;
}

#GOA {
    background-color: green;
    color: white;
    width: 100px;
    border-radius: 50px;
}

/* თუ გამოსახულება უფრო მცირეა ვიდრე სივრცე, რომლის შევსებაც გსურთ, გამოსახულება განმეორდება ჩვეულებრივად, რათა დაფაროს მთელი შესავსები სივრცე. 
 თუ გვსურს რომ არ განმმეორდეს გამოსახულება მაშინ ჩვენ გამოვიყენებთ ქვეთვისება background-repeat-ს და მნიშვნელობად მივანიჭებთ no-repeat. 
 ასევე შეგვიძლია მივანიჭოთ repeat-x(ჰორიზონტარულად ამეორებს) repeat-y(ვერტიკალურად ამეორებს) და repeat(ამეორებს როგორც ჰორიზონტალურად ისე ვერტიკალურად). */
 
/* ჩვენ შეგვიძლია background გამოსახულების პოზიციონირება, background-position თვისებით. ზედა მარცხენა კუთხე გამოიყენება როგორც კორდინატთა ათვლის სათავე (0;0).
 background-position თვისებას ჩვენ მნიშვნელობად შეგვიძლია გადავცეთ პიქსელები როგორც კორდინატებით თანმიმდევრობით(Xpx Ypx), 
 ასევე სტყვიერად მაგალითად: right top, top left, right, left, buttom, top, center და ა.შ. ასევე შეგვიძლია გადავცეთ პროცენტებისც. */

 /* backgroun-size თვისება აკონტროლებს background გამოსახულების ზომას. პირველი მნიშვნელობა რომელიც მას გადაეცემა არის width და შემდეგ კი height. 
 მას ასევე შეიძლება 2 დამატებით მნიშვნელობა გადაეცეს რომლებიცაა cover და contain. cover-ის მინიჭებით ფოტო შეავსებს მთლიან ყუთს, 
 ხოლო contain-ის გამოყებით ფოტო მიაღწევს მის ისეთ მაქსიმალურ ზომას რომლითაც ის ბოლომდე მოთავსდება ფოტოში. */


